// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: teacher_rpcservice.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Teacherrpcservice {
  public static partial class TeacherRpcService
  {
    static readonly string __ServiceName = "teacherrpcservice.TeacherRpcService";

    static readonly grpc::Marshaller<global::Teacherrpcservice.IdRequest> __Marshaller_teacherrpcservice_IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Teacherrpcservice.IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Teacherrpcservice.Teacher> __Marshaller_teacherrpcservice_Teacher = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Teacherrpcservice.Teacher.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Teacherrpcservice.EmptyRequest> __Marshaller_teacherrpcservice_EmptyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Teacherrpcservice.EmptyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> __Method_GetName = new grpc::Method<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetName",
        __Marshaller_teacherrpcservice_IdRequest,
        __Marshaller_teacherrpcservice_Teacher);

    static readonly grpc::Method<global::Teacherrpcservice.EmptyRequest, global::Teacherrpcservice.Teacher> __Method_GetTeachers = new grpc::Method<global::Teacherrpcservice.EmptyRequest, global::Teacherrpcservice.Teacher>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTeachers",
        __Marshaller_teacherrpcservice_EmptyRequest,
        __Marshaller_teacherrpcservice_Teacher);

    static readonly grpc::Method<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> __Method_GetTeachers2 = new grpc::Method<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GetTeachers2",
        __Marshaller_teacherrpcservice_IdRequest,
        __Marshaller_teacherrpcservice_Teacher);

    static readonly grpc::Method<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> __Method_GetTeachers3 = new grpc::Method<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetTeachers3",
        __Marshaller_teacherrpcservice_IdRequest,
        __Marshaller_teacherrpcservice_Teacher);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Teacherrpcservice.TeacherRpcserviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TeacherRpcService</summary>
    public abstract partial class TeacherRpcServiceBase
    {
      /// <summary>
      ///
      ///获取老师姓名，通过id来查询。
      ///该方法是一个简单的RPC方法，方法内部处理完成后返回结果。
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Teacherrpcservice.Teacher> GetName(global::Teacherrpcservice.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个服务器流方式RPC方法，客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流，直到里面没有任何消息。
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTeachers(global::Teacherrpcservice.EmptyRequest request, grpc::IServerStreamWriter<global::Teacherrpcservice.Teacher> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个客户端流方式RPC方法，客户端写入一个消息序列并将其发送到服务器，同样也是使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Teacherrpcservice.Teacher> GetTeachers2(grpc::IAsyncStreamReader<global::Teacherrpcservice.IdRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个双向流式RPC方法，两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
      ///比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。 每个流中的消息顺序被预留。
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTeachers3(grpc::IAsyncStreamReader<global::Teacherrpcservice.IdRequest> requestStream, grpc::IServerStreamWriter<global::Teacherrpcservice.Teacher> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TeacherRpcService</summary>
    public partial class TeacherRpcServiceClient : grpc::ClientBase<TeacherRpcServiceClient>
    {
      /// <summary>Creates a new client for TeacherRpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TeacherRpcServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TeacherRpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TeacherRpcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TeacherRpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TeacherRpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      ///获取老师姓名，通过id来查询。
      ///该方法是一个简单的RPC方法，方法内部处理完成后返回结果。
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Teacherrpcservice.Teacher GetName(global::Teacherrpcservice.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取老师姓名，通过id来查询。
      ///该方法是一个简单的RPC方法，方法内部处理完成后返回结果。
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Teacherrpcservice.Teacher GetName(global::Teacherrpcservice.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetName, null, options, request);
      }
      /// <summary>
      ///
      ///获取老师姓名，通过id来查询。
      ///该方法是一个简单的RPC方法，方法内部处理完成后返回结果。
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Teacherrpcservice.Teacher> GetNameAsync(global::Teacherrpcservice.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取老师姓名，通过id来查询。
      ///该方法是一个简单的RPC方法，方法内部处理完成后返回结果。
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Teacherrpcservice.Teacher> GetNameAsync(global::Teacherrpcservice.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetName, null, options, request);
      }
      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个服务器流方式RPC方法，客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流，直到里面没有任何消息。
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Teacherrpcservice.Teacher> GetTeachers(global::Teacherrpcservice.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTeachers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个服务器流方式RPC方法，客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流，直到里面没有任何消息。
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Teacherrpcservice.Teacher> GetTeachers(global::Teacherrpcservice.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTeachers, null, options, request);
      }
      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个客户端流方式RPC方法，客户端写入一个消息序列并将其发送到服务器，同样也是使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> GetTeachers2(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTeachers2(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个客户端流方式RPC方法，客户端写入一个消息序列并将其发送到服务器，同样也是使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> GetTeachers2(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetTeachers2, null, options);
      }
      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个双向流式RPC方法，两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
      ///比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。 每个流中的消息顺序被预留。
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> GetTeachers3(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTeachers3(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取老师列表
      ///该方法是一个双向流式RPC方法，两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
      ///比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。 每个流中的消息顺序被预留。
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Teacherrpcservice.IdRequest, global::Teacherrpcservice.Teacher> GetTeachers3(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetTeachers3, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TeacherRpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TeacherRpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TeacherRpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetName, serviceImpl.GetName)
          .AddMethod(__Method_GetTeachers, serviceImpl.GetTeachers)
          .AddMethod(__Method_GetTeachers2, serviceImpl.GetTeachers2)
          .AddMethod(__Method_GetTeachers3, serviceImpl.GetTeachers3).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TeacherRpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetName, serviceImpl.GetName);
      serviceBinder.AddMethod(__Method_GetTeachers, serviceImpl.GetTeachers);
      serviceBinder.AddMethod(__Method_GetTeachers2, serviceImpl.GetTeachers2);
      serviceBinder.AddMethod(__Method_GetTeachers3, serviceImpl.GetTeachers3);
    }

  }
}
#endregion
